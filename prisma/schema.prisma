generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model UserModel {
  id         String      @id @default(cuid())
  first_name String?
  last_name  String?
  email      String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  watchlist  watchlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model watchlist {
  id            String  @id @default(cuid())
  userId        String
  companyticker String  @db.VarChar(20)
  order         Int?
  listName      String?

  user    UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
  company companies @relation(fields: [companyticker], references: [ticker], onDelete: Cascade)

  @@unique([userId, listName, companyticker])
}

model companies {
  ticker             String              @id(map: "ticker_pk") @db.VarChar(20)
  description        String?             @db.VarChar(2000)
  exchange           String?             @db.VarChar(10)
  marketcap          BigInt?
  analysttargetprice Decimal?            @db.Decimal(12, 2)
  sharesoutstanding  BigInt?
  forwardpe          Decimal?            @db.Decimal(6, 2)
  movingavg50        Decimal?            @db.Decimal(12, 2)
  movingavg200       Decimal?            @db.Decimal(12, 2)
  fiscalyearend      String?             @db.VarChar(10)
  name               String?             @db.VarChar(50)
  earnings           earnings[]
  earnings_calendar  earnings_calendar[]
  stock_data_daily   stock_data_daily[]
  watchlist          watchlist[]

  @@index([ticker, name])
}

model stock_data_daily {
  date          DateTime  @db.Date
  open          Decimal?  @db.Decimal(11, 2)
  close         Decimal?  @db.Decimal(11, 2)
  high          Decimal?  @db.Decimal(11, 2)
  low           Decimal?  @db.Decimal(11, 2)
  volume        Int?
  companyticker String    @db.VarChar(20)
  companies     companies @relation(fields: [companyticker], references: [ticker], onDelete: NoAction, onUpdate: NoAction, map: "stock_data_daily_company_ticker_fk")

  @@id([date, companyticker], map: "stock_data_daily_pk")
}

model gross_domestic_product {
  date  DateTime @id(map: "gdp_pk") @db.Date
  value Decimal  @db.Decimal(9, 3)
}

model interest_rates {
  date  DateTime @id(map: "interestrates_pk") @db.Date
  value Decimal  @db.Decimal(5, 3)
}

model consumer_price_index {
  date  DateTime @id(map: "cpi_pk") @db.Date
  value Decimal  @db.Decimal(7, 3)
}

model inflation {
  date  DateTime @id(map: "inflation_pk") @db.Date
  value Decimal  @db.Decimal(6, 3)
}

model unemployment {
  date  DateTime @id(map: "unemployment_pk") @db.Date
  value Decimal  @db.Decimal(6, 3)
}

model earnings {
  companyticker String    @db.VarChar(20)
  reportedDate  DateTime  @db.Date
  reportedEPS   Decimal?  @db.Decimal(7, 2)
  estimatedEPS  Decimal?  @db.Decimal(7, 2)
  companies     companies @relation(fields: [companyticker], references: [ticker], onDelete: NoAction, onUpdate: NoAction, map: "earnings_fk")

  @@id([companyticker, reportedDate], map: "earnings_pk")
}

model earnings_calendar {
  id            String    @id @default(uuid())
  companyticker String    @db.VarChar(20)
  reportDate    DateTime  @db.Date
  estimate      Decimal?  @db.Decimal(7, 2)
  companies     companies @relation(fields: [companyticker], references: [ticker], onDelete: NoAction, onUpdate: NoAction, map: "earningscalendar_fk")
}
